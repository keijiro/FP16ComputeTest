#pragma enable_d3d11_debug_symbols

#pragma kernel Convert
#pragma kernel Integrate32
#pragma kernel Integrate16

uint VectorSize;

Buffer<float> Input32;
Buffer<uint> Input16;

Buffer<float> Matrix32;
Buffer<uint> Matrix16;

RWBuffer<float> Output32;
RWBuffer<uint> Output16;

min16float2 UnpackFP16(uint a)
{
    return min16float2(f16tof32(uint2(a & 0xFFFF, a >> 16)));
}

uint PackFP16(min16float2 a)
{
    uint2 i = f32tof16(a);
    return i.x | (i.y << 16);
}

[numthreads(32, 1, 1)]
void Convert(uint tid : SV_DispatchThreadID)
{
    Output16[tid] = PackFP16(min16float2(Input32[tid * 2], Input32[tid * 2 + 1]));
}

[numthreads(32, 1, 1)]
void Integrate32(uint tid : SV_DispatchThreadID)
{
    float prod = 0;

    for (uint i = 0; i < VectorSize; i++)
        prod += Input32[i] * Matrix32[VectorSize * i + tid];

    Output32[tid] = prod;
}

[numthreads(32, 1, 1)]
void Integrate16(uint tid : SV_DispatchThreadID)
{
    min16float2 prod = 0;

    for (uint i = 0; i < VectorSize / 2; i++)
    {
        min16float2 x = UnpackFP16(Input16[i]);
        prod += x.x * UnpackFP16(Matrix16[VectorSize / 2 * (i * 2 + 0) + tid]);
        prod += x.y * UnpackFP16(Matrix16[VectorSize / 2 * (i * 2 + 1) + tid]);
    }

    Output16[tid] = PackFP16(prod);
}
