#pragma enable_d3d11_debug_symbols

#pragma kernel Encode16
#pragma kernel Decode16
#pragma kernel Multiply32
#pragma kernel Multiply32T
#pragma kernel Multiply16
#pragma kernel Multiply16T

uint VectorSize;

Buffer<float> Input32;
Buffer<uint> Input16;

Buffer<float> Matrix32;
Buffer<uint> Matrix16;

RWBuffer<float> Output32;
RWBuffer<uint> Output16;

min16float2 UnpackFP16(uint a)
{
    return min16float2(f16tof32(uint2(a & 0xFFFF, a >> 16)));
}

uint PackFP16(min16float2 a)
{
    uint2 i = f32tof16(a);
    return i.x | (i.y << 16);
}

[numthreads(32, 1, 1)]
void Encode16(uint tid : SV_DispatchThreadID)
{
    Output16[tid] = PackFP16(min16float2(Input32[tid * 2], Input32[tid * 2 + 1]));
}

[numthreads(32, 1, 1)]
void Decode16(uint tid : SV_DispatchThreadID)
{
    min16float2 packed = UnpackFP16(Input16[tid]);
    Output32[tid * 2 + 0] = packed.x;
    Output32[tid * 2 + 1] = packed.y;
}

[numthreads(32, 1, 1)]
void Multiply32(uint tid : SV_DispatchThreadID)
{
    float prod = 0;

    for (uint i = 0; i < VectorSize; i++)
        prod += Input32[i] * Matrix32[VectorSize * tid + i];

    Output32[tid] = prod;
}

[numthreads(32, 1, 1)]
void Multiply32T(uint tid : SV_DispatchThreadID)
{
    float prod = 0;

    for (uint i = 0; i < VectorSize; i++)
        prod += Input32[i] * Matrix32[VectorSize * i + tid];

    Output32[tid] = prod;
}

[numthreads(32, 1, 1)]
void Multiply16(uint tid : SV_DispatchThreadID)
{
    const uint offs1 = VectorSize * tid;
    const uint offs2 = offs1 + VectorSize / 2;

    min16float2 prod = 0;

    for (uint i = 0; i < VectorSize / 2; i++)
    {
        min16float2 a = UnpackFP16(Input16[i]);
        min16float2 m1 = UnpackFP16(Matrix16[i + offs1]);
        min16float2 m2 = UnpackFP16(Matrix16[i + offs2]);
        prod.x += a.x * m1.x + a.y * m1.y;
        prod.y += a.x * m2.x + a.y * m2.y;
    }

    Output16[tid] = PackFP16(prod);
}

[numthreads(32, 1, 1)]
void Multiply16T(uint tid : SV_DispatchThreadID)
{
    min16float2 prod = 0;
    uint offs = tid;

    for (uint i = 0; i < VectorSize / 2; i++)
    {
        min16float2 a = UnpackFP16(Input16[i]);
        prod += a.x * UnpackFP16(Matrix16[offs]); offs += VectorSize / 2;
        prod += a.y * UnpackFP16(Matrix16[offs]); offs += VectorSize / 2;
    }

    Output16[tid] = PackFP16(prod);
}
